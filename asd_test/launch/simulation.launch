<launch>

    <!-- Arguments -->
    <arg name="rtabmapviz" default="false" />
    <arg name="rviz" default="true" />
    <arg name="show_gazebo" default="true" />

    <!-- Robot Related Argumates -->
    <arg name="robot_name" default="leo_rover" />

    <!-- If restarting from crash don't delete db-->
    <arg name="localization" default="false"/>
    <arg name="database_path" default=""/>
    <arg if="$(arg localization)" name="rtabmap_args" default=""/>
    <arg unless="$(arg localization)" name="rtabmap_args" default="-d"/>

    <!-- Config Files -->
    <arg name="rviz_cfg" default="$(find asd_test)/rviz/default.rviz" />

    <!-- Turtlebot3 -->
    <arg name="x_pos" default="-3.0"/>
    <arg name="y_pos" default="1.0"/>
    <arg name="z_pos" default="1.0"/>

    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <!-- <arg name="world_name" value="$(find turtlebot3_gazebo)/worlds/turtlebot3_house.world"/> -->
        <arg name="world_name" value="$(find asd_test)/worlds/marsyard.world"/>
        <arg name="paused" value="false"/>
        <arg name="use_sim_time" value="true"/>
        <arg name="gui" value="$(arg show_gazebo)"/>
        <arg name="headless" value="$(eval show_gazebo == 'false')"/>
        <arg name="debug" value="false"/>
        <arg name="verbose" value="false"/>
    </include>

    <!-- Spawn Robot -->
    <param name="robot_description" command="$(find xacro)/xacro --inorder $(find asd_robot)/urdf/$(arg robot_name).urdf.xacro" />

    <node pkg="gazebo_ros" type="spawn_model" name="spawn_urdf" args="-urdf -model $(arg robot_name) -x $(arg x_pos) -y $(arg y_pos) -z $(arg z_pos) -param robot_description" />

    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
        <param name="publish_frequency" type="double" value="200.0" />
    </node>

    <node pkg="joint_state_publisher" type="joint_state_publisher" name="joint_state_publisher">
        <param name="rate" type="double" value="200.0" />
    </node>

    <group ns="rtabmap">
        <node name="rtabmap" pkg="rtabmap_ros" type="rtabmap" output="screen" args="$(arg rtabmap_args)">
            <param name="database_path" type="string" value="$(arg database_path)"/>
            <param name="frame_id" type="string" value="base_footprint"/>

            <param name="subscribe_rgb" type="bool" value="true"/>
            <param name="subscribe_depth" type="bool" value="true"/>
            <param name="subscribe_scan" type="bool" value="false"/>

            <param name="approx_sync" type="bool" value="true"/>
            <param name="wait_for_transform" value="0.5" />

            <!-- use actionlib to send goals to move_base -->
            <param name="use_action_for_goal" type="bool" value="true"/>
            <remap from="move_base" to="/move_base"/>

            <!-- inputs -->
            <remap from="odom" to="/odom"/>
            <remap from="rgb/image" to="/camera/rgb/image_raw"/>
            <remap from="depth/image" to="/camera/depth/image_raw"/>
            <remap from="rgb/camera_info" to="/camera/rgb/camera_info"/>

            <!-- output -->
            <remap from="grid_map" to="/map"/>

            <!-- localization mode -->
            <param if="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="false"/>
            <param unless="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="true"/>

            <param name="imu_topic" value="/imu" />
            <!-- only used with VIO approaches -->
            <param name="wait_imu_to_init" value="true" />
            <param name="gps_topic" value="/gps/fix" />
            <!-- gps async subscription -->

            <!-- Extra Parameters -->

            <!--<param name="stereo" value="false" />
            <param name="visual_odometry" value="true" /> -->

            <!--<param name="Odom/Strategy" type="string" value="0" />
            <param name="Vis/EstimationType" type="string" value="1" />
            <param name="Vis/MaxDepth" type="string" value="0" />
            <param name="Odom/GuessMotion" type="string" value="true" />
            <param name="Vis/MinInliers" type="string" value="10" />
            <param name="OdomF2M/MaxSize" type="string" value="1000" />
            <param name="GFTT/MinDistance" type="string" value="10" />
            <param name="GFTT/QualityLevel" type="string" value="0.00001" />
            <param name="GFTT/QualityLevel" type="string" value="0.00001" />-->
        </node>

        <!-- visualization with rtabmapviz -->
        <node if="$(arg rtabmapviz)" pkg="rtabmap_ros" type="rtabmapviz" name="rtabmapviz" args="-d $(find rtabmap_ros)/launch/config/rgbd_gui.ini" output="screen">
            <param name="subscribe_scan" type="bool" value="false"/>
            <param name="subscribe_depth" type="bool" value="true"/>
            <param name="subscribe_odom" type="bool" value="true"/>

            <param name="frame_id" type="string" value="base_footprint"/>
            <param name="approx_sync" type="bool" value="true"/>

            <remap from="odom" to="/odom"/>
        </node>
    </group>

    <!-- move_base -->
    <include file="$(find asd_core)/launch/move_base.launch">
        <arg name="move_forward_only" value="false"/>
        <arg name="cmd_vel_topic" default="/mouse_vel" />
    </include>

    <!-- Publish tf 'base_footprint' as pose.-->
    <node pkg="asd_core" type="tf_to_pose_publisher.py" name="waffle_pose_publisher">
        <param name="from_frame" type="string" value="odom" />
        <param name="to_frame" type="string" value="base_footprint" />
    </node>

    <!-- Launch elevation mapping node. -->
    <node pkg="elevation_mapping" type="elevation_mapping" name="elevation_mapping" output="screen">
        <rosparam command="load" file="$(find asd_core)/config/elevation_mapping/waffle_robot.yaml" />
        <rosparam command="load" file="$(find elevation_mapping)/config/sensor_processors/perfect.yaml" />
    </node>

    <!-- rviz -->
    <group if="$(arg rviz)">
        <node pkg="rviz" type="rviz" name="rviz" required="true" args="-d $(arg rviz_cfg)"/>
    </group>

</launch>
